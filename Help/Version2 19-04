%% Partie Eddy
declare [QTk]={Module.link ["x-oz://system/wp/QTk.ozf"]}

   local 
      Canvas
      W=700	%width of the map
      H=700	%height of the map
      NbLines = 7 % number of rows and columns
      TmpL %height (and width) of a box
      Desc = td(canvas(bg:white	%create a canvas representing the map
		       width:W
		       height:H
		       handle:Canvas))
      Window={QTk.build Desc}
      TmpL=H div NbLines
      proc{GenerateGrid ActL}
	 if ActL=<0 then skip %%
	 else
	    {Canvas create(line 0 ActL W ActL)}
	    {Canvas create(line ActL 0 ActL H)}
	 %{Canvas create(rect W-TmpL H-TmpL W H fill:blue outline:red)}
	    {GenerateGrid ActL-TmpL}
	 end
      end
      proc{CreateRectangle X Y}	%procedure that creates a rectangle and moves it
	 %Sera plutot la methode de jeu non?
	 Tag={Canvas newTag($)}
	 {Canvas create(rect X Y X+100 Y+100 fill:blue tags:Tag)}
      in
	 {Window bind(event:"<Up>" action:proc{$} {Tag delete} {CreateRectangle X {Max 0 Y-TmpL}} end)}	%move the rectangle by deleting the current one
	 {Window bind(event:"<Down>" action:proc{$} {Tag delete} {CreateRectangle X {Min H-TmpL Y+TmpL}} end)}	% and creating a new one in the direction indicated
	 {Window bind(event:"<Left>" action:proc{$} {Tag delete} {CreateRectangle {Max 0 X-TmpL} Y} end)}
	 {Window bind(event:"<Right>" action:proc{$} {Tag delete} {CreateRectangle {Min H-TmpL X+TmpL} Y} end)}
   end
      
   in
      {Window show} %show the map
      {GenerateGrid H}
      {CreateRectangle 0 0}
end