Etapes du jeu PokemOz:

1.Choisir la map.

  Le fichier map doit être un fichier ".txt". On peut stocker toutes nos maps dans un dossier map.
  L'utilisateur pourra sélectionner une map parmis tant d'autre grâce à une interface graphique. -> record comme dans le fichier
  La liste peut être représentée par une listbox 
  (http://mozart.github.io/mozart-v1/doc-1.4.0/mozart-stdlib/wp/qtk/html/node15.html#chapter.widgets.listbox). 

2.Choisir PokemOz starter.

  L'utilisateur a le choix entre 3 PokemOz starter (Bulbasoz, Oztirtle, Charmandoz).
  L'utilisateur peut sélectionner un starter grâce aussi à une listbox.
  A ce moment-ci on peut déjà créer le trainer qui représente l'utilisateur.
  
3.Afficher la map.

  La map étant déjà choisie, il s'agit de juste l'afficher. Pour ce faire, on peut utiliser un canva 
  (http://mozart.github.io/mozart-v1/doc-1.4.0/mozart-stdlib/wp/qtk/html/node9.html#chapter.widgets.canvas).
  Chaque champ de la map (tuple) sera représenté par un rectangle dont la couleur changera selon la valeur du champ.

  --> Encodage des types de case?

4.Afficher les trainer.

  Le trainer représentant l'utilisateur commence d'office au point en haut à droite.
  Pour les trainers adverses, on peut en créer de façon aléatoire. On peut choisir de créer au maximum tel nombre de 
  trainer selon la taille de la map.  De plus un trainer adverse ne peut avoir qu'un certain nombre de PokemOz au maximum.
  Les PokemOz détenus par un trainer sera aussi fait de manière aléatoire. De même que leur niveau, etc.
  Par contre pour position initiale, il faut veiller à ce que 2 trainers ne se retrouvent pas sur la même case.
  Chaque trainer correspondra à un thread.
  
5.Déplacement des trainers.

  Le trainer (utilisateur) bougera via les touches directionneles du clavier. Si un trainer adverse se trouve côte à côte alors il y a une fight.
  Mais comment garder trace des positions de chaque trainer ?
  Une façon de faire, que je propose, serait de créer une liste de port, où chaque port correspondrait à un trainer. 
  Ainsi donc, chaque trainer avant de bouger vérifie premièrement si il n'y a pas de trainer sur la case vers laquelle il veut bouger.
  --> Si deux trainers se déplacent en même temps sur la même case
  --> Q ports
  Deuxièmement, et cela ne s'applique que pour le trainer-utilisateur, on check s'il n'y a pas de trainer adverse sur une case à côté.
  
  Il faut aussi vérifier si l'utilisateur n'est pas sur de l'herbe. Auquel cas, il y a des chances qu'un PokemOz wild s'y trouve.
  
  Le déplacement de façon visuel se fera comme la démo4. On fera bouger le rectangle (ou la figure représentant le trainer) vers le mileu de la case
  choisie.
  
6.Fight

  Avant toute chose, seule une fight vs wild PokemOz permet à l'utilisateur de fuir. On peut aussi donner la possibilité de capturer un wild PokemOz.
  
  Quelque soit le type de fight il faut permettre de switcher de PokemOz et d'attaquer.
  
  Les attaques doivent prendre en compte les types des différents PokemOz, ainsi que le niveau.
  
  L'idée de liste de ports a toute son utilité. Grâce à ceci on peut facilement faire communiquer les 2 trainers.
  Trainer 1 envoie un message d'attaque (contenant le PokemOz qui attaque) au trainer 2 qui retire les points de vie à son PokemOz.
  --> OK  
  Il faudra veiller à la fin de chaque combat d'augmenter les points d'expérience.
  
  Il faut aussi mettre en pause tout les trainers durant une fight (pas de déplacement possible dans la map).

7.Fin

  Soit l'utilisateur a tout ses PokemOz K.O donc gameover. Soit il a atteint l'objectif (point en bas à droite).


Structure utilisé:
pokemoz(t:type n:name hp:(r:remaining m:max) lx:level xp:experience)
trainer(c:column r:row isDefeated:b p1:pokemoz p2:pokemoz p3:pokemoz)
trainers(player:port_trainer ia1:port_trainer ...)
map (r(1 1 1 0 0 0 0) r(1 1 1 0 0 1 1) r(1 1 1 0 0 1 1) r(0 0 0 0 0 1 1) r(0 0 0 1 1 1 1) r(0 0 0 1 1 0 0) r(0 0 0 0 0 0 0))

--> 1) Map + Canvas
--> 2) Deplacement (A chaque fois que je passe dans une case verte, lancer le calcul de probabilité
pour lancer le combat) ou si a côté du trainer.
--> 3) Combat (si plusieurs tous gagnent la même XP)

A faire pour dimanche 19/04:

Solaiman: Gérer les canvas, représentation de la map et déplacements ci-dessus
Eddy: Design de l'app + structures de données utilisées


--> 